<?php

/**
 * @file
 * Contains idix_rgpd.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function idix_rgpd_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the idix_rgpd module.
    case 'help.page.idix_rgpd':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Manage RGPD parameters') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_install().
 */
function idix_rgpd_install() {
  $destination = 'public://idix_rgpd';
  file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
}

/**
 * Implements hook_theme().
 */
function idix_rgpd_theme($existing, $type, $theme, $path) {
  $definition = \Drupal::service('config.typed')->getDefinition('idix_rgpd.settings');
  $servicesDefinition = array_keys($definition['mapping']['services']['mapping']);
  $themes = [];
  foreach ($servicesDefinition as $service) {
    $themes['idix_rgpd_service_' . $service] = [
      'variables' => [
        'config' => NULL
      ]
    ];
  }
  return $themes;
}

/**
 * Implements hook_library_info_build().
 */
function idix_rgpd_library_info_build() {
  $stream_wrapper = \Drupal::service('stream_wrapper_manager')->getViaUri('public://');
  $path = base_path() . $stream_wrapper->getDirectoryPath() . '/idix_rgpd';

  $libraries = [];
  $libraries['services_loader'] = [
    'js' => [
      $path . '/services-loader.js' => []
    ],
    'dependencies' => ['idix_rgpd/init']
  ];

  return $libraries;
}

/**
 * Implements hook_preprocess_html().
 */
function idix_rgpd_preprocess_html(&$variables) {
  $config = \Drupal::config('idix_rgpd.settings');
  if ($config->get('enabled') && \Drupal::service('theme.manager')->getActiveTheme()->getName() == \Drupal::config('system.theme')->get('default')) {
    $variables['html_attributes']->addClass('rgpd-consent');
    $variables['#attached']['drupalSettings']['idix_rgpd'] = [];
    $variables['#attached']['drupalSettings']['idix_rgpd']['options'] = \Drupal::config('idix_rgpd.settings')->get('configuration');
    $variables['#attached']['library'][] = 'idix_rgpd/services_loader';
  }
}

function _idix_rgpd_generate_services() {
  $renderArray = [];
  $services = \Drupal::config('idix_rgpd.settings')->get('services');
  foreach ($services as $service => $serviceConfig) {
    if ($serviceConfig['enabled']) {
      $renderArray[] = [
        '#theme' => 'idix_rgpd_service_' . $service,
        '#config' => $serviceConfig
      ];
    }
  }
  _idix_rgpd_generate_file($renderArray, 'services-loader.js');
}

function _idix_rgpd_generate_file ($renderArray, $filename) {
  $html = \Drupal::service('renderer')->render($renderArray);
  $html = preg_replace("#<!--[^-]*(?:-(?!->)[^-]*)*-->#", '', preg_replace(array('/\r/', '/\n/'), '', $html));
  $html = preg_replace('/\s+(?![^<>]*>)/x', '', $html);
  file_unmanaged_save_data($html, 'public://idix_rgpd/' . $filename, FILE_EXISTS_REPLACE);
}

// function _idix_rgpd_get_services ($service = NULL, $type = NULL) {
//   $services = [
//     "gajs" => [
//       "type" => "analytic",
//       "name" => "Google Analytics (ga.js)",
//     ],
//     "analytics" => [
//       "type" => "analytic",
//       "name" => "Google Analytics (universal)",
//     ],
//     "youtube" => [
//       "type" => "video",
//       "name" => "YouTube",
//       "regexp" => [
//         "/youtube\.com\/embed\/([a-z0-9\-_]+)/i"
//       ]
//     ]
//   ];

//   // filtering options
//   if ($service != NULL) {
//     return isset($services[$service]) ? $services[$service] : NULL;
//   }
//   elseif ($type != NULL) {
//     if (gettype($type) == 'string') {
//       $type = [$type];
//     }
//     return array_filter($services, function ($service) use ($type) {
//       return in_array($service['type'], $type);
//     });
//   }

//   return $services;
// }
