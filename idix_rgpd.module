<?php

/**
 * @file
 * Contains idix_rgpd.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function idix_rgpd_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the idix_rgpd module.
    case 'help.page.idix_rgpd':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Manage RGPD parameters') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_install().
 */
function idix_rgpd_install() {
  $destination = file_default_scheme() . '://idix_rgpd';
  file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
}

/**
 * Implements hook_uninstall().
 */
function idix_rgpd_uninstall() {
  $destination = file_default_scheme() . '://idix_rgpd';
  file_unmanaged_delete_recursive($destination);
}

/**
 * Implements hook_theme().
 */
function idix_rgpd_theme($existing, $type, $theme, $path) {
  $servicesDefs = _idix_rgpd_get_services_defs();
  $themes = [];
  foreach ($servicesDefs as $service => $def) {
    $themes['idix_rgpd_service_' . $service] = [
      'variables' => [
        'config' => NULL
      ]
    ];
  }
  return $themes;
}

/**
 * Implements hook_library_info_build().
 */
function idix_rgpd_library_info_build() {
  $stream_wrapper = \Drupal::service('stream_wrapper_manager')->getViaUri(file_default_scheme() . '://');
  $path = base_path() . $stream_wrapper->getDirectoryPath() . '/idix_rgpd';

  $libraries = [];
  $libraries['services_loader'] = [
    'js' => [
      $path . '/services-loader.js' => []
    ],
    'dependencies' => ['idix_rgpd/init']
  ];

  return $libraries;
}

/**
 * Implements hook_page_attachments().
 */
function idix_rgpd_page_attachments(array &$attachments) {
  $config = \Drupal::config('idix_rgpd.settings');
  $activeTheme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
  $defaultTheme = \Drupal::config('system.theme')->get('default');
  if ($config->get('enabled') && $activeTheme == $defaultTheme) {
    $attachments['#attached']['drupalSettings']['idix_rgpd'] = [];
    $attachments['#attached']['drupalSettings']['idix_rgpd']['options'] = $config->get('configuration');
    $attachments['#attached']['library'][] = 'idix_rgpd/services_loader';
  }
}

/**
 * Implements hook_preprocess_html().
 */
function idix_rgpd_preprocess_html(&$variables) {
  $config = \Drupal::config('idix_rgpd.settings');
  $activeTheme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
  $defaultTheme = \Drupal::config('system.theme')->get('default');
  if ($config->get('enabled') && $activeTheme == $defaultTheme) {
    $variables['html_attributes']->addClass('rgpd-consent');
  }
}

function _idix_rgpd_generate_services_loader() {
  $renderArray = [];
  $servicesDefs = _idix_rgpd_get_services_defs();
  foreach ($servicesDefs as $service => $serviceConfig) {
    $config = \Drupal::config('idix_rgpd.service.' . $service);
    if ($config->get('enabled')) {
      $renderArray[] = [
        '#theme' => 'idix_rgpd_service_' . $service,
        '#config' => $config->getRawData()
      ];
    }
  }
  _idix_rgpd_generate_file($renderArray, 'services-loader.js');
}

function _idix_rgpd_generate_file ($renderArray, $filename) {
  $html = \Drupal::service('renderer')->render($renderArray);
  if (Drupal::service('twig')->isDebug()) {
    $html = preg_replace("#<!--[^-]*(?:-(?!->)[^-]*)*-->#", '', preg_replace(array('/\r/', '/\n/'), '', $html));
    $html = preg_replace('/\s+(?![^<>]*>)/x', '', $html);
  }
  file_unmanaged_save_data($html, 'public://idix_rgpd/' . $filename, FILE_EXISTS_REPLACE);
}

function _idix_rgpd_get_services_defs () {
  $services_defs = [];
  $defs = \Drupal::service('config.typed')->getDefinitions();
  foreach ($defs as $defName => $def) {
    if (preg_match('/idix_rgpd\.service\.(.*)/', $defName, $matches)) {
      $services_defs[$matches[1]] = $def;
    }
  }
  return $services_defs;
}

function _idix_rgpd_service_fields_analytics () {
  return [
    'enabled' => [
      '#type' => 'checkbox'
    ],
    'analyticsUa' => [
      '#type' => 'textfield',
      '#size' => 12
    ],
    'analyticsUaCreate' => [
      '#type' => 'textarea',
      '#description' => "Objet javascript correspondant au 3e paramètre pour la méthode `create` (<a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference\" target=\"_blank\">documentation Google</a>).<br>
      <code>ga('create', 'UA-XXXX-Y', {'cookieExpires': 34128000});</code>"
    ],
    'analyticsPrepare' => [
      '#type' => 'textarea'
    ],
    'analyticsPageView' => [
      '#type' => 'textarea'
    ],
    'analyticsMore' => [
      '#type' => 'textarea'
    ],
    'analyticsAnonymizeIp' => [
      '#type' => 'checkbox'
    ]
  ];
}

function _idix_rgpd_service_fields_gtag () {
  return [
    'enabled' => [
      '#type' => 'checkbox'
    ],
    'gtagUa' => [
      '#type' => 'textfield',
      '#size' => 12
    ],
    'gtagPrepare' => [
      '#type' => 'textarea'
    ],
    'gtagMore' => [
      '#type' => 'textarea'
    ]
  ];
}
